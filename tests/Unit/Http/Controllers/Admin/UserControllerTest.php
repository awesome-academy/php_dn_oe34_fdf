<?php

namespace Tests\Unit\Http\Controllers\Admin;

use App\Http\Controllers\Admin\UserController;
use App\Model\User;
use App\Repositories\BaseRepository;
use App\Services\AuthService;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Pagination\LengthAwarePaginator;
use Mockery;
use Tests\TestCase;

class UserControllerTest extends TestCase
{
    use WithoutMiddleware;

    protected $userController;
    protected $mockBaseRepo;
    protected $mockAuthService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->userController = new UserController();
        $this->mockBaseRepo = Mockery::mock(BaseRepository::class);
        $this->mockAuthService = Mockery::mock(AuthService::class);
    }

    public function test_list_all_users()
    {
        $mock = $this->mockBaseRepo;

        $mock->shouldReceive('listAll')->andReturn(User::paginate(10));

        app()->instance('base_repository', $mock);

        $response = $this->get('admin/user');
        $originContent = $response->getOriginalContent();

        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf(LengthAwarePaginator::class, $originContent->users);
        $this->assertInstanceOf(User::class, $originContent->users->first());
    }

    public function test_store_user_success()
    {
        $request = [
            "_token" => "P2ySatyIHxO4C5mrTYGVlR3Irfkpy8eWdgmnRmP0",
            "full_name" => "TestStoreMocking",
            "username" => "TestStoreMocking",
            "email" => "TestStoreMocking@gmail.com",
            "password" => "TestStoreMocking",
            "password_confirmation" => "TestStoreMocking",
            "phone_number" => 1234567890,
        ];

        $mock = $this->mockAuthService;

        $mock->shouldReceive('registerUser')->andReturn([true, trans('messages.register_success')]);

        app()->instance('auth_service', $mock);

        $response = $this->post('/admin/user/create', $request);

        $response->assertStatus(302);
        $response->assertSessionHas('success');
        $response->assertRedirect('/admin/user');
        $this->assertEquals(trans('messages.register_success'), $response->getSession()->get('success'));
        $this->assertNull($response->getSession()->get('failed'));
    }

    public function test_store_user_fail()
    {
        $request = [
            "_token" => "P2ySatyIHxO4C5mrTYGVlR3Irfkpy8eWdgmnRmP0",
            "full_name" => "TestStoreMocking",
            "username" => "TestStoreMocking",
            "email" => "TestStoreMocking@gmail.com",
            "password" => "TestStoreMocking",
            "password_confirmation" => "TestStoreMocking",
            "phone_number" => 1234567890,
        ];

        $mock = $this->mockAuthService;

        $mock->shouldReceive('registerUser')->andReturn([false, trans('messages.register_failed')]);

        app()->instance('auth_service', $mock);

        $response = $this->post('admin/user/create', $request);

        $response->assertStatus(302);
        $response->assertSessionHas('failed');
        $response->assertRedirect('/admin/user');
        $this->assertEquals(trans('messages.register_failed'), $response->getSession()->get('failed'));
        $this->assertNull($response->getSession()->get('success'));
    }

    public function test_update_user_success()
    {
        $request = [
            "_token" => "P2ySatyIHxO4C5mrTYGVlR3Irfkpy8eWdgmnRmP0",
            "_method" => "put",
            "full_name" => "TestEditMocking",
            "email" => "TestEditMocking@gmail.com",
            "phone_number" => "1234567890",
            "role_id" => "2",
        ];

        $mock = $this->mockBaseRepo;

        $mock->shouldReceive('update')->andReturn(true);
        $mock->shouldReceive('findObject')->andReturn(true);

        app()->instance('base_repository', $mock);

        $response = $this->put('/admin/user/edit/1', $request);

        $response->assertStatus(302);
        $response->assertSessionHas('success');
        $response->assertRedirect('/admin/user');
        $this->assertEquals(trans('messages.update_success'), $response->getSession()->get('success'));
        $this->assertNull($response->getSession()->get('failed'));
    }

    public function test_update_user_fail()
    {
        $request = [
            "_token" => "P2ySatyIHxO4C5mrTYGVlR3Irfkpy8eWdgmnRmP0",
            "_method" => "put",
            "full_name" => "TestEditMocking",
            "email" => "TestEditMocking@gmail.com",
            "phone_number" => "1234567890",
            "role_id" => "2",
        ];

        $mock = $this->mockBaseRepo;

        $mock->shouldReceive('update')->andReturn(false);
        $mock->shouldReceive('findObject')->andReturn(true);

        app()->instance('base_repository', $mock);

        $response = $this->put('/admin/user/edit/1', $request);

        $response->assertStatus(302);
        $response->assertSessionHas('failed');
        $response->assertRedirect('/admin/user');
        $this->assertEquals(trans('messages.update_failed'), $response->getSession()->get('failed'));
        $this->assertNull($response->getSession()->get('success'));
    }

    public function test_destroy_user_success()
    {
        $mock = $this->mockBaseRepo;
        $mock->shouldReceive('destroy')->andReturn(true);
        $mock->shouldReceive('findObject')->andReturn(true);

        app()->instance('base_repository', $mock);

        $response = $this->json('DELETE',
            "/admin/user/delete/1",
            [
                '_token' => 'efg29hc23nf08qnw32N$',
                'id' => 1,
            ]);

        $response->assertStatus(200);
        $this->assertEquals(trans('messages.delete_success'), $response->getOriginalContent());
    }

    public function test_destroy_user_fail()
    {
        $mock = $this->mockBaseRepo;
        $mock->shouldReceive('destroy')->andReturn(false);
        $mock->shouldReceive('findObject')->andReturn(true);

        app()->instance('base_repository', $mock);

        $response = $this->json('DELETE',
            "/admin/user/delete/1",
            [
                '_token' => 'efg29hc23nf08qnw32N$',
                'id' => 1,
            ]);

        $response->assertStatus(200);
        $this->assertEquals(trans('messages.delete_failed'), $response->getOriginalContent());
    }
}
