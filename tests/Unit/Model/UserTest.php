<?php

namespace Tests\Unit\Model;

use App\Model\Comment;
use App\Model\Favorite;
use App\Model\Order;
use App\Model\Rating;
use App\Model\Role;
use App\Model\Suggest;
use App\Model\User;
use Hash;
use Illuminate\Database\Eloquent\Collection;
use Tests\TestCase;

class UserTest extends TestCase
{
    protected $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::firstOrCreate(['email' => 'testing@gmail.com'], [
            'full_name' => 'Testing',
            'username' => 'Testing',
            'email' => 'testing@gmail.com',
            'password' => 'testing',
            'phone_number' => 1234567890,
            'role_id' => 1,
            'verify_at' => null,
        ]);
    }

    public function test_contains_valid_fillable_properties()
    {
        $this->assertEquals([
            'full_name',
            'username',
            'email',
            'password',
            'phone_number',
            'role_id',
            'verify_token',
            'verify_at',
        ], $this->user->getFillable());
    }

    public function test_contains_valid_hidden_properties()
    {
        $this->assertEquals([
            'password',
            'verify_token',
        ], $this->user->getHidden());
    }

    public function test_user_belong_to_role()
    {
        $role = $this->user->role;

        $this->assertInstanceOf(Role::class, $role);
    }

    public function test_user_has_many_comments()
    {
        $user = $this->user;

        $comment = Comment::firstOrCreate(['user_id' => $user->id], [
            'comment' => 'Testing',
            'user_id' => $user->id,
            'product_id' => 1,
        ]);

        $this->assertTrue($user->comments->contains($comment));
        $this->assertInstanceOf(Collection::class, $user->comments);
    }

    public function test_user_has_many_orders()
    {
        $user = $this->user;

        $order = Order::firstOrCreate(['user_id' => $user->id], [
            'user_id' => $user->id,
            'order_code' => 'Testing',
            'total_price' => 1234,
            'status' => 1,
        ]);

        $this->assertTrue($user->orders->contains($order));
        $this->assertInstanceOf(Collection::class, $user->orders);
    }

    public function test_user_has_many_suggests()
    {
        $user = $this->user;

        $suggest = Suggest::firstOrCreate(['user_id' => $user->id], [
            'title' => 'Testing',
            'suggest' => 'Testing',
            'status' => 1,
            'user_id' => $user->id,
        ]);

        $this->assertTrue($user->suggests->contains($suggest));
        $this->assertInstanceOf(Collection::class, $user->suggests);
    }

    public function test_user_has_many_favorites()
    {
        $user = $this->user;

        $favorite = Favorite::firstOrCreate(['user_id' => $user->id], [
            'product_id' => 1,
            'user_id' => $user->id,
        ]);

        $this->assertTrue($user->favorites->contains($favorite));
        $this->assertInstanceOf(Collection::class, $user->favorites);
    }

    public function test_user_has_many_ratings()
    {
        $user = $this->user;

        $rating = Rating::firstOrCreate(['user_id' => $user->id], [
            'rated_index' => 1,
            'product_id' => 1,
            'user_id' => $user->id,
        ]);

        $this->assertTrue($user->ratings->contains($rating));
        $this->assertInstanceOf(Collection::class, $user->ratings);
    }

    public function test_mutator_password_attribute()
    {
        $user = new User(['password' => 'testing']);

        $passwordHash = $user->setPasswordAttribute('testing');

        $this->assertTrue(hash_equals($passwordHash, $user->password));
    }

    public function test_mutator_email_attribute()
    {
        $user = new User(['email' => 'testing@gmail.com']);

        $token = $user->setEmailAttribute('testing@gmail.com');

        $emailHash = explode('.', $token)[0];

        $this->assertTrue(base64_decode($emailHash) === $this->user->email);
    }

    public function test_scope_search()
    {
        $user = $this->user;

        $this->assertNotEmpty($user->search('testing', 'full_name')->first());
    }
}
