<?php

namespace Tests\Feature\Http\Controllers\Admin;

use App\Http\Controllers\Admin\UserController;
use App\Http\Requests\RegisterRequest;
use App\Http\Requests\UpdateUserRequest;
use App\Model\User;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\View\View;
use Tests\TestCase;

class UserControllerTest extends TestCase
{
    use WithoutMiddleware;

    protected $userController;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->userController = new UserController();
    }

    public function test_list_all_users()
    {
        $response = $this->get('/admin/user');

        $originContent = $response->getOriginalContent();

        $this->assertEquals(200, $response->getStatusCode());
        $this->assertInstanceOf(LengthAwarePaginator::class, $originContent->users);
        $this->assertInstanceOf(User::class, $originContent->users->first());
    }

    public function test_show_create_user_view()
    {
        $response = $this->userController->create();

        $this->assertInstanceOf(View::class, $response);
    }

    public function test_store_user_success()
    {
        $request = RegisterRequest::create('/admin/user/create', 'post', [
            "_token" => "P2ySatyIHxO4C5mrTYGVlR3Irfkpy8eWdgmnRmP0",
            "full_name" => "TestStore",
            "username" => "TestStore",
            "email" => "testStore@gmail.com",
            "password" => "testStore",
            "password_confirmation" => "testStore",
            "phone_number" => 1234567890,
            "role_id" => 1,
        ]);

        $response = $this->userController->store($request);

        $this->assertEquals(302, $response->getStatusCode());
        $this->assertEquals(trans('messages.register_success'), $response->getSession()->get('success'));
        $this->assertNull($response->getSession()->get('failed'));
        $this->assertNotNull(User::where('username', 'TestStore')->first());
    }

    public function test_store_user_fail()
    {
        $request = RegisterRequest::create('/admin/user/create', 'post');

        $response = $this->userController->store($request);

        $this->assertEquals(302, $response->getStatusCode());
        $this->assertEquals(trans('messages.register_failed'), $response->getSession()->get('failed'));
        $this->assertNull($response->getSession()->get('success'));
    }

    public function test_show_edit_user_view()
    {
        $userId = User::where('username', 'TestStore')->first()->id;

        $response = $this->userController->edit($userId);

        $this->assertInstanceOf(View::class, $response);
    }

    public function test_show_edit_user_view_fail()
    {
        $response = $this->get('/admin/user/edit/0');

        $this->assertEquals(404, $response->getStatusCode());
    }

    public function test_update_user_success()
    {
        $userId = User::where('username', 'TestStore')->first()->id;

        $request = UpdateUserRequest::create("/admin/user/edit/$userId", 'put', [
            "_token" => "P2ySatyIHxO4C5mrTYGVlR3Irfkpy8eWdgmnRmP0",
            "_method" => "put",
            "full_name" => "TestEdit",
            "email" => "testEdit@gmail.com",
            "phone_number" => "1234567890",
            "role_id" => "2",
        ]);

        $response = $this->userController->update($request, $userId);

        $this->assertEquals(302, $response->getStatusCode());
        $this->assertEquals(trans('messages.update_success'), $response->getSession()->get('success'));
        $this->assertNull($response->getSession()->get('failed'));
        $this->assertNotNull(User::where('full_name', 'TestEdit')->first());
    }

    public function test_update_user_fail()
    {
        $userId = User::where('username', 'TestStore')->first()->id;

        $request = UpdateUserRequest::create("/admin/user/edit/$userId", 'put', [
            "email" => null,
        ]);

        $response = $this->userController->update($request, $userId);

        $this->assertEquals(302, $response->getStatusCode());
        $this->assertEquals(trans('messages.update_failed'), $response->getSession()->get('failed'));
        $this->assertNull($response->getSession()->get('success'));
    }

    public function test_destroy_user_success()
    {
        $userId = User::where('email', 'testEdit@gmail.com')->first()->id;

        $response = $this->userController->destroy($userId);

        $this->assertEquals(200, $response->getStatusCode());
        $this->assertEquals(trans('messages.delete_success'), $response->getOriginalContent());
        $this->assertNull(User::find($userId));
    }

    public function test_destroy_user_fail()
    {
        $response = $this->userController->destroy(0);

        $this->assertEquals(200, $response->getStatusCode());
        $this->assertEquals(trans('messages.delete_failed'), $response->getOriginalContent());
    }
}
